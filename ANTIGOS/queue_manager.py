#!/usr/bin/env python3
"""
Gerenciador de Fila com Redis para API PROJUDI V3
"""

import redis
import json
import time
import uuid
import logging
from datetime import datetime
from typing import Dict, Any, Optional
from threading import Thread, Lock

logger = logging.getLogger(__name__)

class QueueManager:
    def __init__(self, redis_url: str = "redis://localhost:6379"):
        """Inicializa o gerenciador de fila"""
        self.redis_url = redis_url
        self.redis = redis.from_url(redis_url, decode_responses=True)
        self.queue_name = "projudi_queue"
        self.processing_name = "projudi_processing"
        self.results_name = "projudi_results"
        self.lock = Lock()
        
        # Testa conex√£o com Redis
        try:
            self.redis.ping()
            logger.info("‚úÖ Redis conectado com sucesso")
        except Exception as e:
            logger.error(f"‚ùå Erro ao conectar com Redis: {e}")
            raise
    
    def add_to_queue(self, request_data: Dict[str, Any]) -> str:
        """Adiciona uma requisi√ß√£o √† fila"""
        request_id = str(uuid.uuid4())
        
        queue_item = {
            "id": request_id,
            "data": request_data,
            "status": "pending",
            "position": 0,
            "created_at": datetime.now().isoformat(),
            "retries": 0,
            "max_retries": 3
        }
        
        with self.lock:
            # Adiciona √† fila
            self.redis.lpush(self.queue_name, json.dumps(queue_item))
            
            # Atualiza posi√ß√£o na fila
            queue_length = self.redis.llen(self.queue_name)
            queue_item["position"] = queue_length
            
            # Salva item atualizado
            self.redis.hset(self.results_name, request_id, json.dumps(queue_item))
            
            logger.info(f"üì• Requisi√ß√£o {request_id} adicionada √† fila (posi√ß√£o: {queue_length})")
        
        return request_id
    
    def get_from_queue(self) -> Optional[Dict[str, Any]]:
        """Obt√©m pr√≥xima requisi√ß√£o da fila"""
        try:
            with self.lock:
                # Verifica se h√° requisi√ß√µes na fila
                if self.redis.llen(self.queue_name) == 0:
                    return None
                
                # Remove da fila (FIFO)
                item_json = self.redis.rpop(self.queue_name)
                if not item_json:
                    return None
                
                item = json.loads(item_json)
                item["status"] = "processing"
                item["started_at"] = datetime.now().isoformat()
                
                # Adiciona √† lista de processamento
                self.redis.hset(self.processing_name, item["id"], json.dumps(item))
                
                logger.info(f"üîÑ Processando requisi√ß√£o {item['id']}")
                return item
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao obter da fila: {e}")
            return None
    
    def mark_completed(self, request_id: str, result: Dict[str, Any]):
        """Marca requisi√ß√£o como conclu√≠da"""
        try:
            with self.lock:
                # Remove da lista de processamento
                self.redis.hdel(self.processing_name, request_id)
                
                # Atualiza resultado
                result_data = {
                    "id": request_id,
                    "status": "completed",
                    "result": result,
                    "completed_at": datetime.now().isoformat()
                }
                
                self.redis.hset(self.results_name, request_id, json.dumps(result_data))
                logger.info(f"‚úÖ Requisi√ß√£o {request_id} conclu√≠da")
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao marcar como conclu√≠da: {e}")
            # Garante que seja removida da lista de processamento mesmo com erro
            try:
                self.redis.hdel(self.processing_name, request_id)
            except:
                pass
    
    def mark_failed(self, request_id: str, error: str, retry: bool = True):
        """Marca requisi√ß√£o como falhada"""
        try:
            with self.lock:
                # Remove da lista de processamento
                self.redis.hdel(self.processing_name, request_id)
                
                # Obt√©m dados da requisi√ß√£o
                item_json = self.redis.hget(self.results_name, request_id)
                if item_json:
                    item = json.loads(item_json)
                    item["retries"] = item.get("retries", 0) + 1
                    
                    if retry and item["retries"] < item.get("max_retries", 3):
                        # Recoloca na fila para retry
                        item["status"] = "pending"
                        item["error"] = error
                        item["retry_at"] = datetime.now().isoformat()
                        
                        self.redis.lpush(self.queue_name, json.dumps(item))
                        self.redis.hset(self.results_name, request_id, json.dumps(item))
                        
                        logger.warning(f"üîÑ Requisi√ß√£o {request_id} falhou, tentativa {item['retries']}/{item['max_retries']}")
                    else:
                        # Marca como falhada definitivamente
                        result_data = {
                            "id": request_id,
                            "status": "failed",
                            "error": error,
                            "retries": item["retries"],
                            "failed_at": datetime.now().isoformat()
                        }
                        
                        self.redis.hset(self.results_name, request_id, json.dumps(result_data))
                        logger.error(f"‚ùå Requisi√ß√£o {request_id} falhou definitivamente ap√≥s {item['retries']} tentativas")
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao marcar como falhada: {e}")
    
    def get_status(self, request_id: str) -> Optional[Dict[str, Any]]:
        """Obt√©m status de uma requisi√ß√£o"""
        try:
            item_json = self.redis.hget(self.results_name, request_id)
            if item_json:
                return json.loads(item_json)
            return None
        except Exception as e:
            logger.error(f"‚ùå Erro ao obter status: {e}")
            return None
    
    def get_queue_position(self, request_id: str) -> int:
        """Obt√©m posi√ß√£o na fila de uma requisi√ß√£o"""
        try:
            # Verifica se est√° sendo processada
            if self.redis.hexists(self.processing_name, request_id):
                return 0
            
            # Conta quantas requisi√ß√µes est√£o na frente na fila
            position = 0
            queue_items = self.redis.lrange(self.queue_name, 0, -1)
            
            for item_json in queue_items:
                item = json.loads(item_json)
                if item["id"] == request_id:
                    return position
                position += 1
            
            return -1  # N√£o encontrada na fila
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao obter posi√ß√£o na fila: {e}")
            return -1
    
    def get_queue_stats(self) -> Dict[str, Any]:
        """Obt√©m estat√≠sticas da fila"""
        try:
            pending = self.redis.llen(self.queue_name)
            processing = self.redis.hlen(self.processing_name)
            total_results = self.redis.hlen(self.results_name)
            
            return {
                "pending": pending,
                "processing": processing,
                "total_results": total_results,
                "timestamp": datetime.now().isoformat()
            }
        except Exception as e:
            logger.error(f"‚ùå Erro ao obter estat√≠sticas: {e}")
            return {"error": str(e)}
    
    def clear_old_results(self, max_age_hours: int = 24):
        """Limpa resultados antigos"""
        try:
            cutoff_time = datetime.now().timestamp() - (max_age_hours * 3600)
            deleted_count = 0
            
            # Obt√©m todas as chaves de resultados
            result_keys = self.redis.hkeys(self.results_name)
            
            for key in result_keys:
                item_json = self.redis.hget(self.results_name, key)
                if item_json:
                    item = json.loads(item_json)
                    
                    # Verifica se √© antigo
                    created_at = item.get("created_at")
                    if created_at:
                        try:
                            created_time = datetime.fromisoformat(created_at).timestamp()
                            if created_time < cutoff_time:
                                self.redis.hdel(self.results_name, key)
                                deleted_count += 1
                        except:
                            pass
            
            logger.info(f"üßπ Limpeza: {deleted_count} resultados antigos removidos")
            return deleted_count
            
        except Exception as e:
            logger.error(f"‚ùå Erro na limpeza: {e}")
            return 0
    
    def clear_orphaned_requests(self):
        """Limpa requisi√ß√µes √≥rf√£s que est√£o em processamento h√° muito tempo"""
        try:
            with self.lock:
                # Obt√©m todas as requisi√ß√µes em processamento
                processing_keys = self.redis.hkeys(self.processing_name)
                orphaned_count = 0
                
                for key in processing_keys:
                    item_json = self.redis.hget(self.processing_name, key)
                    if item_json:
                        item = json.loads(item_json)
                        started_at = item.get("started_at")
                        
                        if started_at:
                            try:
                                started_time = datetime.fromisoformat(started_at).timestamp()
                                current_time = datetime.now().timestamp()
                                
                                # Se est√° em processamento h√° mais de 10 minutos, considera √≥rf√£
                                if current_time - started_time > 600:  # 10 minutos
                                    self.redis.hdel(self.processing_name, key)
                                    orphaned_count += 1
                                    logger.warning(f"üßπ Removida requisi√ß√£o √≥rf√£ {key} (em processamento h√° {(current_time - started_time)/60:.1f} minutos)")
                            except:
                                # Se n√£o consegue verificar o tempo, remove de qualquer forma
                                self.redis.hdel(self.processing_name, key)
                                orphaned_count += 1
                                logger.warning(f"üßπ Removida requisi√ß√£o √≥rf√£ {key} (dados corrompidos)")
                
                logger.info(f"üßπ Limpeza de √≥rf√£s: {orphaned_count} requisi√ß√µes removidas")
                return orphaned_count
                
        except Exception as e:
            logger.error(f"‚ùå Erro na limpeza de √≥rf√£s: {e}")
            return 0 