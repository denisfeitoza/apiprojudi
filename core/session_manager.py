#!/usr/bin/env python3
"""
Gerenciador de Sess√µes Playwright para PROJUDI API v4
"""

import asyncio
import uuid
import time
import tempfile
import shutil
from datetime import datetime, timedelta
from typing import Dict, Optional, List
from dataclasses import dataclass, field
from contextlib import asynccontextmanager

from playwright.async_api import async_playwright, Browser, BrowserContext, Page
from loguru import logger

from config import settings
from core.cache_manager import cache_manager
from core.concurrency_manager import concurrency_manager

@dataclass
class Session:
    """Representa uma sess√£o do navegador"""
    id: str
    browser: Browser
    context: BrowserContext
    page: Page
    temp_dir: str
    created_at: datetime = field(default_factory=datetime.now)
    last_used: datetime = field(default_factory=datetime.now)
    is_busy: bool = False
    is_logged_in: bool = False

class SessionManager:
    """Gerenciador de sess√µes Playwright"""
    
    def __init__(self):
        self.sessions: Dict[str, Session] = {}
        self.playwright = None
        self.browser_type = None
        self._lock = asyncio.Lock()
        self._cleanup_task = None
        
    async def initialize(self):
        """Inicializa o gerenciador de sess√µes"""
        try:
            logger.info("üöÄ Inicializando Playwright...")
            self.playwright = await async_playwright().start()
            # Detectar sistema operacional
            import platform
            import os
            
            # Usar Firefox no macOS, Chromium no Linux
            if platform.system() == "Darwin":  # macOS
                self.browser_type = self.playwright.firefox
                logger.info("üåê Usando Firefox (macOS - vis√≠vel)")
            else:
                self.browser_type = self.playwright.chromium
                if platform.system() == "Linux":
                    logger.info("üåê Usando Chromium (VPS Linux - headless)")
                else:
                    logger.info("üåê Usando Chromium (Desktop - vis√≠vel)")
            
            # Instalar navegadores se necess√°rio
            logger.info("üì¶ Verificando instala√ß√£o dos navegadores...")
            # await self.playwright.chromium.install()
            
            # Inicializar cache Redis
            await cache_manager.initialize()
            
            # Iniciar task de limpeza
            self._cleanup_task = asyncio.create_task(self._cleanup_sessions_task())
            
            logger.info("‚úÖ SessionManager inicializado com sucesso")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao inicializar SessionManager: {e}")
            raise
    
    async def shutdown(self):
        """Finaliza o gerenciador de sess√µes"""
        try:
            logger.info("üîÑ Finalizando SessionManager...")
            
            # Cancelar task de limpeza
            if self._cleanup_task:
                self._cleanup_task.cancel()
                try:
                    await self._cleanup_task
                except asyncio.CancelledError:
                    pass
            
            # Fechar todas as sess√µes
            await self.close_all_sessions()
            
            # Finalizar cache Redis
            await cache_manager.shutdown()
            
            # Finalizar Playwright
            if self.playwright:
                await self.playwright.stop()
            
            logger.info("‚úÖ SessionManager finalizado")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao finalizar SessionManager: {e}")
    
    async def get_session(self) -> Optional[Session]:
        """Obt√©m uma sess√£o dispon√≠vel ou cria uma nova"""
        return await concurrency_manager.execute_with_limits(self._get_session_internal)
    
    async def _get_session_internal(self) -> Optional[Session]:
        """Implementa√ß√£o interna de get_session com cache"""
        async with self._lock:
            # Verificar se o Playwright foi inicializado
            if not self.playwright or not self.browser_type:
                logger.warning("‚ö†Ô∏è Playwright n√£o inicializado, inicializando agora...")
                await self.initialize()
                
                if not self.playwright or not self.browser_type:
                    logger.error("‚ùå Falha ao inicializar Playwright")
                    return None
            
            # Procurar sess√£o dispon√≠vel
            for session in self.sessions.values():
                if not session.is_busy and self._is_session_valid(session):
                    session.is_busy = True
                    session.last_used = datetime.now()
                    logger.info(f"‚ôªÔ∏è Reutilizando sess√£o {session.id}")
                    return session
            
            # Criar nova sess√£o se ainda h√° espa√ßo
            if len(self.sessions) < settings.max_browsers:
                session = await self._create_session()
                if session:
                    self.sessions[session.id] = session
                    session.is_busy = True
                    logger.info(f"üÜï Nova sess√£o criada: {session.id}")
                    return session
            
            logger.warning("‚ö†Ô∏è Pool de sess√µes cheio, aguarde...")
            return None
    
    async def release_session(self, session_or_id, force_close: bool = False):
        """Libera uma sess√£o para reutiliza√ß√£o ou a fecha se force_close=True"""
        # Aceita tanto Session quanto session_id (string)
        if isinstance(session_or_id, str):
            session_id = session_or_id
            session = self.sessions.get(session_id)
        else:
            session = session_or_id
            session_id = session.id if session else None
            
        if session and session_id in self.sessions:
            if force_close:
                logger.info(f"üîì Fechando sess√£o for√ßadamente: {session_id}")
                await self.close_session(session)
            else:
                session.is_busy = False
                session.last_used = datetime.now()
                logger.info(f"üîì Sess√£o liberada: {session_id}")
                
    async def release_and_close_session(self, session_or_id):
        """Libera e fecha uma sess√£o definitivamente"""
        await self.release_session(session_or_id, force_close=True)
    
    async def close_session(self, session: Session):
        """Fecha uma sess√£o espec√≠fica"""
        try:
            if session and session.id in self.sessions:
                await session.context.close()
                await session.browser.close()
                
                # Limpar diret√≥rio tempor√°rio
                if session.temp_dir:
                    try:
                        shutil.rmtree(session.temp_dir)
                    except:
                        pass
                
                del self.sessions[session.id]
                logger.info(f"üóëÔ∏è Sess√£o fechada: {session.id}")
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao fechar sess√£o {session.id}: {e}")
    
    async def criar_sessao(self) -> Optional[Session]:
        """Cria uma nova sess√£o (alias para get_session)"""
        return await self.get_session()
    
    async def fechar_sessao(self, session_id: str):
        """Fecha uma sess√£o espec√≠fica pelo ID"""
        session = self.sessions.get(session_id)
        if session:
            await self.close_session(session)
    
    async def close_all_sessions(self):
        """Fecha todas as sess√µes"""
        sessions_to_close = list(self.sessions.values())
        for session in sessions_to_close:
            await self.close_session(session)
        
        logger.info(f"üßπ Todas as {len(sessions_to_close)} sess√µes foram fechadas")
    
    async def _create_session(self) -> Optional[Session]:
        """Cria uma nova sess√£o com retry e aguardos"""
        for tentativa in range(3):  # 3 tentativas
            try:
                logger.info(f"üîÑ Tentativa {tentativa + 1}/3 de criar sess√£o...")
                session_id = str(uuid.uuid4())
                temp_dir = tempfile.mkdtemp(prefix=f"projudi_session_{session_id}_")
                
                # Aguardo entre tentativas
                if tentativa > 0:
                    await asyncio.sleep(5 * tentativa)
                
                # Configura√ß√µes robustas para VPS Linux (Chromium) e macOS (Firefox)
                import platform
                import os
                
                # For√ßar headless em VPS Linux; Desktop segue settings (padr√£o vis√≠vel)
                force_headless = settings.playwright_headless
                if platform.system() == "Linux":
                    force_headless = True
                    logger.info("üîß For√ßando modo headless em VPS Linux")
                
                launch_args = {
                    'headless': force_headless,
                    'slow_mo': max(1000, settings.playwright_slow_mo),  # M√≠nimo 1 segundo
                    'timeout': 60000  # 60 segundos para launch
                }
                
                # Adicionar argumentos espec√≠ficos para VPS Linux
                if settings.playwright_headless:
                    # Args m√≠nimos e seguros para VPS Linux; n√£o desabilitar JS ou imagens
                    launch_args.update({
                        'args': [
                            '--no-sandbox',
                            '--disable-setuid-sandbox',
                            '--disable-dev-shm-usage',
                            '--no-first-run',
                            '--no-zygote',
                            '--disable-gpu',
                            '--disable-extensions',
                            '--disable-popup-blocking',
                            '--enable-automation',
                            '--headless=new'
                        ]
                    })
                
                browser = await self.browser_type.launch(**launch_args)
                
                # Criar contexto com configura√ß√µes
                context = await browser.new_context(
                    user_agent='Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                    viewport={'width': 1920, 'height': 1080},
                    locale='pt-BR',
                    timezone_id='America/Sao_Paulo',
                    accept_downloads=True,
                    ignore_https_errors=True,
                    java_script_enabled=True
                )
                
                # Configurar timeouts
                context.set_default_timeout(settings.playwright_timeout)
                context.set_default_navigation_timeout(settings.playwright_timeout)
                
                # Criar p√°gina
                page = await context.new_page()
                
                # Configura√ß√µes adicionais da p√°gina
                await page.add_init_script("""
                    Object.defineProperty(navigator, 'webdriver', {get: () => undefined});
                    Object.defineProperty(navigator, 'plugins', {get: () => [1, 2, 3, 4, 5]});
                    Object.defineProperty(navigator, 'languages', {get: () => ['pt-BR', 'pt', 'en']});
                """)
                
                session = Session(
                    id=session_id,
                    browser=browser,
                    context=context,
                    page=page,
                    temp_dir=temp_dir
                )
                
                logger.info(f"‚úÖ Sess√£o criada com sucesso: {session_id}")
                return session
                
            except Exception as e:
                logger.error(f"‚ùå Tentativa {tentativa + 1}/3 falhou: {e}")
                if tentativa == 2:  # √∫ltima tentativa
                    logger.error(f"‚ùå Falha final ao criar sess√£o ap√≥s 3 tentativas")
                await asyncio.sleep(2)  # Aguardo antes de pr√≥xima tentativa
        
        return None
    
    def _is_session_valid(self, session: Session) -> bool:
        """Verifica se uma sess√£o ainda √© v√°lida"""
        try:
            # Verificar se a sess√£o n√£o √© muito antiga (30 minutos)
            if datetime.now() - session.created_at > timedelta(minutes=30):
                return False
            
            # Verificar se a sess√£o n√£o est√° sem uso h√° muito tempo (10 minutos)
            if datetime.now() - session.last_used > timedelta(minutes=10):
                return False
            
            # Verificar se o browser ainda est√° conectado
            if session.browser.is_connected():
                return True
            
            return False
            
        except Exception:
            return False
    
    async def _cleanup_sessions_task(self):
        """Task de limpeza executada periodicamente"""
        while True:
            try:
                await asyncio.sleep(60)  # Executar a cada 1 minuto
                await self._cleanup_invalid_sessions()
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå Erro na limpeza de sess√µes: {e}")
    
    async def _cleanup_invalid_sessions(self):
        """Remove sess√µes inv√°lidas"""
        async with self._lock:
            invalid_sessions = []
            
            for session in self.sessions.values():
                if not self._is_session_valid(session):
                    invalid_sessions.append(session)
            
            for session in invalid_sessions:
                await self.close_session(session)
            
            if invalid_sessions:
                logger.info(f"üßπ Removidas {len(invalid_sessions)} sess√µes inv√°lidas")
    
    def get_stats(self) -> Dict:
        """Retorna estat√≠sticas do pool de sess√µes"""
        total = len(self.sessions)
        busy = sum(1 for s in self.sessions.values() if s.is_busy)
        logged_in = sum(1 for s in self.sessions.values() if s.is_logged_in)
        
        # Estat√≠sticas base
        stats = {
            'total_sessions': total,
            'busy_sessions': busy,
            'available_sessions': total - busy,
            'logged_in_sessions': logged_in,
            'max_sessions': settings.max_browsers
        }
        
        # Adicionar estat√≠sticas de concorr√™ncia
        concurrency_stats = concurrency_manager.get_stats()
        stats.update({
            'concurrency': concurrency_stats
        })
        
        # Adicionar estat√≠sticas de cache
        cache_stats = {
            'cache_enabled': cache_manager.cache_enabled,
            'cache_connected': cache_manager.is_connected
        }
        stats.update({
            'cache': cache_stats
        })
        
        return stats

# Inst√¢ncia global do gerenciador
session_manager = SessionManager()

@asynccontextmanager
async def get_session():
    """Context manager para usar sess√µes de forma segura"""
    session = await session_manager.get_session()
    if not session:
        raise Exception("N√£o foi poss√≠vel obter uma sess√£o")
    
    try:
        yield session
    finally:
        # Fechar a sess√£o definitivamente para evitar hang
        await session_manager.release_and_close_session(session)