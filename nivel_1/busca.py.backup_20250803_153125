#!/usr/bin/env python3
"""
N√≠vel 1 - M√≥dulo de Busca PROJUDI API v4
Respons√°vel por buscas por CPF, Nome e Processo
"""

import asyncio
import re
from typing import Dict, List, Optional, Literal
from dataclasses import dataclass
from enum import Enum

from playwright.async_api import Page, TimeoutError as PlaywrightTimeoutError
from loguru import logger

from config import settings
from core.session_manager import Session

class TipoBusca(str, Enum):
    CPF = "cpf"
    NOME = "nome"
    PROCESSO = "processo"

@dataclass
class ProcessoEncontrado:
    """Representa um processo encontrado na busca"""
    numero: str
    classe: str
    assunto: str
    id_processo: str
    indice: int
    url_processo: str = ""

@dataclass
class ResultadoBusca:
    """Resultado de uma busca"""
    tipo_busca: TipoBusca
    valor_busca: str
    total_encontrados: int
    processos: List[ProcessoEncontrado]
    sucesso: bool
    mensagem: str = ""
    tempo_execucao: float = 0.0

class LoginManager:
    """Gerenciador de login do PROJUDI"""
    
    @staticmethod
    async def fazer_login(session: Session) -> bool:
        """Realiza login no sistema PROJUDI"""
        try:
            logger.info(f"üîê Fazendo login na sess√£o {session.id}...")
            
            # Navegar para p√°gina de login
            login_url = f"{settings.projudi_base_url}/LogOn?PaginaAtual=-200"
            await session.page.goto(login_url, timeout=30000)
            
            # Aguardar p√°gina carregar
            await session.page.wait_for_load_state('networkidle', timeout=10000)
            
            # Verificar se j√° est√° logado
            if await LoginManager._ja_esta_logado(session.page):
                logger.info(f"‚úÖ J√° estava logado na sess√£o {session.id}")
                session.is_logged_in = True
                return True
            
            # Preencher credenciais
            await session.page.fill('input[name="Usuario"]', settings.projudi_user)
            await session.page.fill('input[name="Senha"]', settings.projudi_pass)
            
            # Clicar em entrar
            await session.page.click('input[name="entrar"]')
            
            # Aguardar redirecionamento
            await session.page.wait_for_load_state('networkidle', timeout=15000)
            
            # Verificar se apareceu a p√°gina de sele√ß√£o de serventia
            if await LoginManager._selecionar_serventia(session.page):
                logger.info(f"‚úÖ Login realizado com sucesso na sess√£o {session.id}")
                session.is_logged_in = True
                return True
            else:
                logger.error(f"‚ùå Falha na sele√ß√£o de serventia na sess√£o {session.id}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erro no login da sess√£o {session.id}: {e}")
            return False
    
    @staticmethod
    async def _ja_esta_logado(page: Page) -> bool:
        """Verifica se j√° est√° logado"""
        try:
            # Verificar se n√£o h√° campos de login na p√°gina
            usuario_field = await page.query_selector('input[name="Usuario"]')
            return usuario_field is None
        except:
            return False
    
    @staticmethod
    async def _selecionar_serventia(page: Page) -> bool:
        """Seleciona a serventia padr√£o com m√∫ltiplas estrat√©gias"""
        try:
            # Aguardar p√°gina carregar
            await page.wait_for_load_state('domcontentloaded', timeout=15000)
            
            # Estrat√©gia 1: Procurar serventia espec√≠fica por texto
            try:
                await page.wait_for_selector('a', timeout=5000)
                
                # Tentar m√∫ltiplas varia√ß√µes do nome da serventia
                variacoes_serventia = [
                    settings.default_serventia,
                    "Advogados",
                    "OAB",
                    "25348-N-GO"
                ]
                
                for variacao in variacoes_serventia:
                    serventia_link = await page.query_selector(f'a:has-text("{variacao}")')
                    if serventia_link:
                        await serventia_link.click()
                        await page.wait_for_load_state('networkidle', timeout=15000)
                        logger.info(f"‚úÖ Serventia selecionada: {variacao}")
                        return True
                        
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Estrat√©gia 1 falhou: {e}")
            
            # Estrat√©gia 2: Procurar qualquer link com "Serventia"
            try:
                links_serventia = await page.query_selector_all('a[href*="Serventia"], a[href*="serventia"]')
                if links_serventia:
                    await links_serventia[0].click()
                    await page.wait_for_load_state('networkidle', timeout=15000)
                    logger.warning("‚ö†Ô∏è Usando primeira serventia encontrada")
                    return True
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Estrat√©gia 2 falhou: {e}")
            
            # Estrat√©gia 3: Procurar qualquer link que n√£o seja logout
            try:
                todos_links = await page.query_selector_all('a')
                for link in todos_links:
                    href = await link.get_attribute('href')
                    texto = await link.inner_text()
                    
                    if href and 'logout' not in href.lower() and 'sair' not in texto.lower():
                        await link.click()
                        await page.wait_for_load_state('networkidle', timeout=15000)
                        logger.warning(f"‚ö†Ô∏è Usando link alternativo: {texto}")
                        return True
                        
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Estrat√©gia 3 falhou: {e}")
            
            # Estrat√©gia 4: JavaScript para clicar no primeiro link v√°lido
            try:
                script = """
                () => {
                    const links = document.querySelectorAll('a');
                    for (let link of links) {
                        const href = link.href;
                        const text = link.textContent.toLowerCase();
                        
                        if (href && !text.includes('logout') && !text.includes('sair')) {
                            link.click();
                            return true;
                        }
                    }
                    return false;
                }
                """
                
                resultado = await page.evaluate(script)
                if resultado:
                    await page.wait_for_load_state('networkidle', timeout=15000)
                    logger.warning("‚ö†Ô∏è Serventia selecionada via JavaScript")
                    return True
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Estrat√©gia 4 falhou: {e}")
            
            logger.error("‚ùå Nenhuma estrat√©gia de sele√ß√£o de serventia funcionou")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Erro geral ao selecionar serventia: {e}")
            return False

class BuscaManager:
    """Gerenciador de buscas no PROJUDI"""
    
    def __init__(self):
        self.base_url = settings.projudi_base_url
        
    async def executar_busca(self, session: Session, tipo_busca: TipoBusca, valor: str) -> ResultadoBusca:
        """Executa uma busca no PROJUDI"""
        import time
        start_time = time.time()
        
        try:
            # SEMPRE fazer login antes de cada busca para garantir sess√£o v√°lida
            logger.info(f"üîê Fazendo login antes da busca {tipo_busca.value}...")
            if not await LoginManager.fazer_login(session):
                return ResultadoBusca(
                    tipo_busca=tipo_busca,
                    valor_busca=valor,
                    total_encontrados=0,
                    processos=[],
                    sucesso=False,
                    mensagem="Falha no login",
                    tempo_execucao=time.time() - start_time
                )
            
            # Navegar para p√°gina de busca
            busca_url = f"{self.base_url}/BuscaProcesso"
            await session.page.goto(busca_url, timeout=30000)
            await session.page.wait_for_load_state('networkidle', timeout=10000)
            
            # Executar busca espec√≠fica
            if tipo_busca == TipoBusca.CPF:
                sucesso = await self._buscar_por_cpf(session.page, valor)
            elif tipo_busca == TipoBusca.NOME:
                sucesso = await self._buscar_por_nome(session.page, valor)
            elif tipo_busca == TipoBusca.PROCESSO:
                sucesso = await self._buscar_por_processo(session.page, valor)
            else:
                raise ValueError(f"Tipo de busca n√£o suportado: {tipo_busca}")
            
            if not sucesso:
                return ResultadoBusca(
                    tipo_busca=tipo_busca,
                    valor_busca=valor,
                    total_encontrados=0,
                    processos=[],
                    sucesso=False,
                    mensagem="Falha na execu√ß√£o da busca",
                    tempo_execucao=time.time() - start_time
                )
            
            # Extrair resultados
            processos = await self._extrair_processos_encontrados(session.page)
            
            return ResultadoBusca(
                tipo_busca=tipo_busca,
                valor_busca=valor,
                total_encontrados=len(processos),
                processos=processos,
                sucesso=True,
                mensagem="Busca realizada com sucesso",
                tempo_execucao=time.time() - start_time
            )
            
        except Exception as e:
            logger.error(f"‚ùå Erro na busca {tipo_busca} = {valor}: {e}")
            return ResultadoBusca(
                tipo_busca=tipo_busca,
                valor_busca=valor,
                total_encontrados=0,
                processos=[],
                sucesso=False,
                mensagem=f"Erro: {str(e)}",
                tempo_execucao=time.time() - start_time
            )
    
    async def _buscar_por_cpf(self, page: Page, cpf: str) -> bool:
        """Executa busca por CPF"""
        try:
            logger.info(f"üîç Buscando por CPF: {cpf}")
            
            # Aguardar campo CPF estar dispon√≠vel
            cpf_field = await page.wait_for_selector('input[name="CpfCnpjParte"]', timeout=10000)
            
            # Limpar e preencher CPF
            await page.fill('input[name="CpfCnpjParte"]', '')
            await page.fill('input[name="CpfCnpjParte"]', cpf)
            
            # Clicar em buscar
            await page.click('input[value="Buscar"]')
            await page.wait_for_load_state('networkidle', timeout=15000)
            
            logger.info("‚úÖ Busca por CPF executada")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro na busca por CPF: {e}")
            return False
    
    async def _buscar_por_nome(self, page: Page, nome: str) -> bool:
        """Executa busca por nome"""
        try:
            logger.info(f"üîç Buscando por nome: {nome}")
            
            # Aguardar campo nome estar dispon√≠vel
            nome_field = await page.wait_for_selector('input[name="NomeParte"]', timeout=10000)
            
            # Limpar e preencher nome
            await page.fill('input[name="NomeParte"]', '')
            await page.fill('input[name="NomeParte"]', nome)
            
            # Clicar em buscar
            await page.click('input[value="Buscar"]')
            await page.wait_for_load_state('networkidle', timeout=15000)
            
            logger.info("‚úÖ Busca por nome executada")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro na busca por nome: {e}")
            return False
    
    async def _buscar_por_processo(self, page: Page, numero_processo: str) -> bool:
        """Executa busca por n√∫mero do processo"""
        try:
            logger.info(f"üîç Buscando processo: {numero_processo}")
            
            # Aguardar campo n√∫mero do processo estar dispon√≠vel
            processo_field = await page.wait_for_selector('input[name="ProcessoNumero"]', timeout=10000)
            
            # Limpar e preencher n√∫mero do processo
            await page.fill('input[name="ProcessoNumero"]', '')
            await page.fill('input[name="ProcessoNumero"]', numero_processo)
            
            # Clicar em buscar
            await page.click('input[value="Buscar"]')
            await page.wait_for_load_state('networkidle', timeout=15000)
            
            logger.info("‚úÖ Busca por processo executada")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro na busca por processo: {e}")
            return False
    
    async def _extrair_processos_encontrados(self, page: Page) -> List[ProcessoEncontrado]:
        """Extrai a lista de processos encontrados"""
        try:
            processos = []
            
            # Verificar se houve redirecionamento direto para um processo
            if await self._verificar_processo_direto(page):
                processo = await self._extrair_processo_direto(page)
                if processo:
                    processos.append(processo)
                return processos
            
            # Verificar se h√° mensagem de "nenhum resultado"
            page_content = await page.content()
            if any(msg in page_content.lower() for msg in ["nenhum", "n√£o encontrado", "n√£o foi encontrado"]):
                logger.info("‚ÑπÔ∏è Nenhum processo encontrado na busca")
                return []
            
            # Aguardar tabela de resultados
            try:
                await page.wait_for_selector('table#Tabela', timeout=5000)
            except PlaywrightTimeoutError:
                logger.warning("‚ö†Ô∏è Tabela de resultados n√£o encontrada")
                return []
            
            # Extrair linhas da tabela (todas as linhas tr, exceto cabe√ßalho)
            linhas = await page.query_selector_all('table#Tabela tr')
            
            # Filtrar apenas linhas com dados (que t√™m 6 colunas td e n√£o s√£o cabe√ßalho)
            linhas_dados = []
            for linha in linhas:
                colunas = await linha.query_selector_all('td')
                
                if len(colunas) >= 6:  # Linha com dados tem 6 colunas
                    # Verificar se n√£o √© linha de cabe√ßalho (TD3 n√£o cont√©m 'N√∫mero')
                    terceira_coluna = await colunas[2].inner_text()
                    
                    # Pular cabe√ßalho (que tem 'N√∫mero' na terceira coluna)
                    if not terceira_coluna.strip().startswith('N√∫mero'):
                        linhas_dados.append(linha)
            
            linhas = linhas_dados
            
            for i, linha in enumerate(linhas):
                try:
                    colunas = await linha.query_selector_all('td')
                    if len(colunas) >= 6:
                        # Estrutura correta: [√≠ndice, vazio, n√∫mero, partes, distribui√ß√£o, selecionar]
                        indice_texto = await colunas[0].inner_text()
                        numero_processo = await colunas[2].inner_text()  # TD3 tem o n√∫mero!
                        processo_partes = await colunas[3].inner_text()  # TD4 tem as partes
                        distribuicao = await colunas[4].inner_text()     # TD5 tem a distribui√ß√£o
                        
                        numero_processo = numero_processo.strip()
                        
                        # Verificar se √© uma linha v√°lida
                        if numero_processo and not numero_processo.startswith('N√∫mero'):
                            # Extrair ID do processo do bot√£o editar/selecionar
                            id_processo = await self._extrair_id_processo(linha)
                            
                            # Extrair informa√ß√µes das partes para criar classe/assunto mais informativo
                            linhas_partes = processo_partes.strip().split('\n')
                            polos_info = []
                            for linha_parte in linhas_partes[:4]:  # Primeiras 4 linhas
                                linha_parte = linha_parte.strip()
                                if linha_parte and not linha_parte.startswith('Polo'):
                                    polos_info.append(linha_parte)
                            
                            classe_info = " vs ".join(polos_info[:2]) if len(polos_info) >= 2 else "Processo"
                            
                            processo = ProcessoEncontrado(
                                numero=numero_processo,
                                classe=classe_info[:100],  # Limitar tamanho
                                assunto=f"Distribu√≠do em {distribuicao.strip()}",
                                id_processo=id_processo,
                                indice=len(processos) + 1
                            )
                            processos.append(processo)
                            logger.info(f"‚úÖ Processo extra√≠do: {numero_processo}")
                            
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erro ao processar linha {i}: {e}")
                    continue
            
            logger.info(f"‚úÖ {len(processos)} processos extra√≠dos")
            return processos
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao extrair processos: {e}")
            return []
    
    async def _verificar_processo_direto(self, page: Page) -> bool:
        """Verifica se foi redirecionado diretamente para um processo"""
        try:
            content = await page.content()
            return "corpo_dados_processo" in content
        except:
            return False
    
    async def _extrair_processo_direto(self, page: Page) -> Optional[ProcessoEncontrado]:
        """Extrai informa√ß√µes quando redirecionado diretamente para um processo"""
        try:
            content = await page.content()
            
            # Tentar encontrar n√∫mero do processo na p√°gina
            numero_match = re.search(r'(\d{7}-\d{2}\.\d{4}\.\d\.\d{2}\.\d{4})', content)
            if numero_match:
                numero_processo = numero_match.group(1)
                
                return ProcessoEncontrado(
                    numero=numero_processo,
                    classe="Processo encontrado",
                    assunto="Busca direta",
                    id_processo="processo_direto",
                    indice=1,
                    url_processo=page.url
                )
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao extrair processo direto: {e}")
            return None
    
    async def _extrair_id_processo(self, linha_element) -> str:
        """Extrai o ID do processo de uma linha da tabela"""
        try:
            # Procurar por bot√£o editar com onclick
            btn_editar = await linha_element.query_selector('button[name="formLocalizarimgEditar"], input[type="button"][name="formLocalizarimgEditar"]')
            
            if btn_editar:
                onclick = await btn_editar.get_attribute('onclick')
                if onclick:
                    match = re.search(r"Id_Processo','([^']+)'", onclick)
                    if match:
                        return match.group(1)
            
            # Fallback: usar √≠ndice gen√©rico
            return f"processo_{int(time.time())}"
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao extrair ID do processo: {e}")
            return f"processo_{int(time.time())}"

# Inst√¢ncia global do gerenciador de busca
busca_manager = BuscaManager()